/**
 *
 * `check_synology` full service configuration snippet for Icinga 2.
 *
 * For updates and contributions, head over to https://github.com/wernerfred/check_synology
 *
 * The `Service` configuration objects provided in this file can be used 1:1 and should not
 * be modified. They try to provide reasonable default threshold values which can be
 * overwritten within the `Host` configuration object.
 *
 * Finding the right thresholds that fit everyone is not possible. So, in general,
 * the default values are more on the "better safe than sorry" side of the spectrum and
 * should be reconfigured based on individual needs.
 *
 * This is specifically applicable to system and disk temperature metrics, as those are
 * highly dependent on ambient temperature levels and vary hugely between regions on earth
 * and/or temperature conditioning scenarios.
 *
 **/

// Baseline template. All service definitions will inherit this.
template Service "synology-base" {

  check_command = "check_synology"

  if (host.vars.synology_host) {
    vars.synology_host = host.vars.synology_host
  } else {
    vars.synology_host = "$address$"
  }

  if (host.vars.synology_location) {
    display_name += " at " + host.vars.synology_location
  }

  // Enable this to make the command run on the monitored host
  // when different from the Icinga instance.
  // command_endpoint   = host_name

}

apply Service "Synology CPU load" {
  import "generic-service"
  import "synology-base"

  // WARNING/CRITICAL if CPU load average (1 minute) is higher than X.
  // The default threshold values have been picked from the default Icinga 2
  // configuration, see `/usr/share/icinga2/include/command-plugins.conf`.
  vars.synology_mode = "load"
  vars.synology_warning = host.vars.synology_load1_warning || 5
  vars.synology_critical = host.vars.synology_load1_critical || 10

  assign where host.vars.check_synology == true || host.vars.os == "DSM"
}

apply Service "Synology system memory" {
  import "generic-service"
  import "synology-base"

  // WARNING/CRITICAL if available/usable system memory is lower than %.
  vars.synology_mode = "memory"
  vars.synology_warning = host.vars.synology_memory_warning || 20
  vars.synology_critical = host.vars.synology_memory_critical || 10

  assign where host.vars.check_synology == true || host.vars.os == "DSM"
}

apply Service "Synology disk status" {
  import "generic-service"
  import "synology-base"

  /*
  CRITICAL when disk status is `SystemPartitionFailed` or `Crashed`.
  WARNING/CRITICAL when disk drive temperature is higher than °C.

  Official *Manufacturer Normal Internal Operating Ranges* are
  0° – 65°C for HDD disks and 0°C to 70°C for SSD disks.

  - https://www.hdsentinel.com/forum/viewtopic.php?f=32&t=1519
  - https://mariushosting.com/whats-a-good-operating-temperature-for-my-synology/
  */
  vars.synology_mode = "disk"
  vars.synology_warning = host.vars.synology_disktemp_warning || 43
  vars.synology_critical = host.vars.synology_disktemp_critical || 50

  assign where host.vars.check_synology == true || host.vars.os == "DSM"
}

apply Service "Synology disk space" {
  import "generic-service"
  import "synology-base"

  // WARNING/CRITICAL if used disk space is higher than %.
  vars.synology_mode = "storage"
  vars.synology_warning = host.vars.synology_diskspace_warning || 90
  vars.synology_critical = host.vars.synology_diskspace_critical || 95

  // Needed to be adjusted to work against "Timeout exceeded" errors.
  check_timeout = 120

  // Check each 15 minutes.
  check_interval = 900

  assign where host.vars.check_synology == true || host.vars.os == "DSM"
}

apply Service "Synology update status" {
  import "generic-service"
  import "synology-base"

  // OK if update status is "Unavailable".
  // WARNING if update status is "Available".
  // UNKNOWN otherwise.
  vars.synology_mode = "update"

  assign where host.vars.check_synology == true || host.vars.os == "DSM"
}

apply Service "Synology system status" {
  import "generic-service"
  import "synology-base"

  // OK if all of the binary system status flags yield `Normal`.
  // CRITICAL if any of the binary system status flags yields `Failed`.
  // WARNING/CRITICAL if system temperature is higher than °C.
  // https://www.tomshardware.com/how-to/how-to-monitor-cpu-temp-temperature
  vars.synology_mode = "status"
  vars.synology_warning = host.vars.synology_temperature_warning || 50
  vars.synology_critical = host.vars.synology_temperature_critical || 60

  assign where host.vars.check_synology == true || host.vars.os == "DSM"
}
